$date
	Mon Sep 15 01:14:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU_tb $end
$var wire 1 ! OUT_VALID $end
$var wire 8 " ALU_OUT [7:0] $end
$var parameter 32 # Input_data_width $end
$var parameter 32 $ Output_data_width $end
$var reg 8 % A [7:0] $end
$var reg 4 & ALU_FUN [3:0] $end
$var reg 8 ' B [7:0] $end
$var reg 1 ( CLK $end
$var reg 1 ) RST $end
$var reg 8 * exp_out [7:0] $end
$var reg 1 + exp_valid $end
$scope module DUT $end
$var wire 8 , A [7:0] $end
$var wire 4 - ALU_FUN [3:0] $end
$var wire 8 . B [7:0] $end
$var wire 1 ( CLK $end
$var wire 1 ) RST $end
$var wire 8 / Shift_out_internal [7:0] $end
$var wire 1 0 Shift_Flag_internal $end
$var wire 1 1 Shift_Enable_internal $end
$var wire 1 ! OUT_VALID $end
$var wire 8 2 Logic_out_internal [7:0] $end
$var wire 1 3 Logic_Flag_internal $end
$var wire 1 4 Logic_Enable_internal $end
$var wire 8 5 CMP_out_internal [7:0] $end
$var wire 1 6 CMP_Flag_internal $end
$var wire 1 7 CMP_Enable_internal $end
$var wire 8 8 Arith_out_internal [7:0] $end
$var wire 1 9 Arith_Flag_internal $end
$var wire 1 : Arith_Enable_internal $end
$var wire 8 ; ALU_OUT [7:0] $end
$var parameter 32 < Input_data_width $end
$var parameter 32 = Output_data_width $end
$scope module ALU_OUT_MUX $end
$var wire 2 > Sel [1:0] $end
$var wire 8 ? In3 [7:0] $end
$var wire 8 @ In2 [7:0] $end
$var wire 8 A In1 [7:0] $end
$var wire 8 B In0 [7:0] $end
$var parameter 32 C Output_data_width $end
$var reg 8 D Out [7:0] $end
$upscope $end
$scope module ARU1 $end
$var wire 8 E A [7:0] $end
$var wire 2 F ALU_FUN [1:0] $end
$var wire 8 G B [7:0] $end
$var wire 1 ( CLK $end
$var wire 1 ) RST $end
$var wire 1 : Arith_Enable $end
$var parameter 2 H ADD $end
$var parameter 2 I DIV $end
$var parameter 32 J Input_data_width $end
$var parameter 2 K MUL $end
$var parameter 32 L Output_data_width $end
$var parameter 2 M SUB $end
$var reg 1 9 Arith_Flag $end
$var reg 8 N Arith_OUT [7:0] $end
$upscope $end
$scope module CMPU1 $end
$var wire 8 O A [7:0] $end
$var wire 2 P ALU_FUN [1:0] $end
$var wire 8 Q B [7:0] $end
$var wire 1 ( CLK $end
$var wire 1 ) RST $end
$var wire 1 7 CMP_Enable $end
$var parameter 2 R CMPEQ $end
$var parameter 2 S CMPG $end
$var parameter 2 T CMPL $end
$var parameter 32 U Input_data_width $end
$var parameter 2 V NOP $end
$var parameter 32 W Output_data_width $end
$var reg 1 6 CMP_Flag $end
$var reg 8 X CMP_OUT [7:0] $end
$upscope $end
$scope module D1 $end
$var wire 2 Y ALU_FUN [1:0] $end
$var parameter 2 Z Arith $end
$var parameter 2 [ CMP $end
$var parameter 2 \ Logic $end
$var parameter 2 ] Shift $end
$var reg 1 : Arith_Enable $end
$var reg 1 7 CMP_Enable $end
$var reg 1 4 Logic_Enable $end
$var reg 1 1 Shift_Enable $end
$upscope $end
$scope module LU1 $end
$var wire 8 ^ A [7:0] $end
$var wire 2 _ ALU_FUN [1:0] $end
$var wire 8 ` B [7:0] $end
$var wire 1 ( CLK $end
$var wire 1 4 Logic_Enable $end
$var wire 1 ) RST $end
$var parameter 2 a AND $end
$var parameter 32 b Input_data_width $end
$var parameter 2 c NAND $end
$var parameter 2 d NOR $end
$var parameter 2 e OR $end
$var parameter 32 f Output_data_width $end
$var reg 1 3 Logic_Flag $end
$var reg 8 g Logic_OUT [7:0] $end
$upscope $end
$scope module OUT_VALID_MUX $end
$var wire 1 9 In0 $end
$var wire 1 3 In1 $end
$var wire 1 6 In2 $end
$var wire 2 h Sel [1:0] $end
$var wire 1 0 In3 $end
$var parameter 32 i Output_data_width $end
$var reg 1 ! Out $end
$upscope $end
$scope module SHU1 $end
$var wire 8 j A [7:0] $end
$var wire 2 k ALU_FUN [1:0] $end
$var wire 8 l B [7:0] $end
$var wire 1 ( CLK $end
$var wire 1 ) RST $end
$var wire 1 1 Shift_Enable $end
$var parameter 32 m Input_data_width $end
$var parameter 32 n Output_data_width $end
$var parameter 2 o SHLA $end
$var parameter 2 p SHLB $end
$var parameter 2 q SHRA $end
$var parameter 2 r SHRB $end
$var reg 1 0 Shift_Flag $end
$var reg 8 s Shift_OUT [7:0] $end
$upscope $end
$upscope $end
$scope task run_test $end
$var reg 8 t expected_out [7:0] $end
$var reg 1 u expected_valid $end
$var reg 8 v tA [7:0] $end
$var reg 8 w tB [7:0] $end
$var reg 4 x tFUN [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 r
b0 q
b11 p
b1 o
b1000 n
b1000 m
b1 i
b1000 f
b1 e
b11 d
b10 c
b1000 b
b0 a
b11 ]
b1 \
b10 [
b0 Z
b1000 W
b0 V
b1000 U
b11 T
b10 S
b1 R
b1 M
b1000 L
b10 K
b1000 J
b11 I
b0 H
b1000 C
b1000 =
b1000 <
b1000 $
b1000 #
$end
#0
$dumpvars
bx x
bx w
bx v
xu
bx t
b0 s
b0 l
b0 k
b0 j
b0 h
b0 g
b0 `
b0 _
b0 ^
b0 Y
b0 X
b0 Q
b0 P
b0 O
b0 N
b0 G
b0 F
b0 E
b0 D
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 ;
1:
09
b0 8
07
06
b0 5
04
03
b0 2
01
00
b0 /
b0 .
b0 -
b0 ,
x+
bx *
0)
0(
b0 '
b0 &
b0 %
b0 "
0!
$end
#5000
1(
#10000
0(
#15000
1(
#20000
0(
#25000
1!
19
1)
1(
#30000
0(
#35000
1(
#40000
0(
#45000
b1111 "
b1111 ;
b1111 D
b1111 8
b1111 B
b1111 N
b101 '
b101 .
b101 G
b101 Q
b101 `
b101 l
b1010 %
b1010 ,
b1010 E
b1010 O
b1010 ^
b1010 j
1u
b1111 t
b0 x
b101 w
b1010 v
1(
#50000
0(
#55000
1(
#60000
0(
#65000
1(
#66000
b1 F
b1 _
b1 P
b1 k
b1 &
b1 -
b111 '
b111 .
b111 G
b111 Q
b111 `
b111 l
b1111 %
b1111 ,
b1111 E
b1111 O
b1111 ^
b1111 j
b1000 t
b1 x
b111 w
b1111 v
1+
b1111 *
#70000
0(
#75000
b1000 "
b1000 ;
b1000 D
b1000 8
b1000 B
b1000 N
1(
#80000
0(
#85000
1(
#86000
14
0:
b0 "
b0 ;
b0 D
0!
b1 Y
b0 F
b0 _
b0 P
b0 k
b1 >
b1 h
b100 &
b100 -
b1111 '
b1111 .
b1111 G
b1111 Q
b1111 `
b1111 l
b11110000 %
b11110000 ,
b11110000 E
b11110000 O
b11110000 ^
b11110000 j
b0 t
b100 x
b1111 w
b11110000 v
b1000 *
#90000
0(
#95000
1!
09
b0 8
b0 B
b0 N
13
1(
#100000
0(
#105000
1(
#106000
b1 F
b1 _
b1 P
b1 k
b101 &
b101 -
b11111111 t
b101 x
b0 *
#110000
0(
#115000
b11111111 "
b11111111 ;
b11111111 D
b11111111 2
b11111111 A
b11111111 g
1(
#120000
0(
#125000
1(
#126000
17
04
b0 "
b0 ;
b0 D
0!
b10 Y
b10 >
b10 h
b1001 &
b1001 -
b11001 '
b11001 .
b11001 G
b11001 Q
b11001 `
b11001 l
b11001 %
b11001 ,
b11001 E
b11001 O
b11001 ^
b11001 j
b1 t
b1001 x
b11001 w
b11001 v
b11111111 *
#130000
0(
#135000
1!
b1 "
b1 ;
b1 D
03
b0 2
b0 A
b0 g
16
b1 5
b1 @
b1 X
1(
#140000
0(
#145000
1(
#146000
b10 F
b10 _
b10 P
b10 k
b1010 &
b1010 -
b1010 '
b1010 .
b1010 G
b1010 Q
b1010 `
b1010 l
b11110 %
b11110 ,
b11110 E
b11110 O
b11110 ^
b11110 j
b10 t
b1010 x
b1010 w
b11110 v
b1 *
#150000
0(
#155000
b10 "
b10 ;
b10 D
b10 5
b10 @
b10 X
1(
#160000
0(
#165000
1(
#166000
b11 F
b11 _
b11 P
b11 k
b1011 &
b1011 -
b11110 '
b11110 .
b11110 G
b11110 Q
b11110 `
b11110 l
b1010 %
b1010 ,
b1010 E
b1010 O
b1010 ^
b1010 j
b11 t
b1011 x
b11110 w
b1010 v
b10 *
#170000
0(
#175000
b11 "
b11 ;
b11 D
b11 5
b11 @
b11 X
1(
#180000
0(
#185000
1(
#186000
11
07
b0 "
b0 ;
b0 D
0!
b11 Y
b0 F
b0 _
b0 P
b0 k
b11 >
b11 h
b1100 &
b1100 -
b1 '
b1 .
b1 G
b1 Q
b1 `
b1 l
b1111 %
b1111 ,
b1111 E
b1111 O
b1111 ^
b1111 j
b111 t
b1100 x
b1 w
b1111 v
b11 *
#190000
0(
#195000
1!
b111 "
b111 ;
b111 D
06
b0 5
b0 @
b0 X
10
b111 /
b111 ?
b111 s
1(
#200000
0(
#205000
1(
#206000
b1 F
b1 _
b1 P
b1 k
b1101 &
b1101 -
b11110 t
b1101 x
b111 *
#210000
0(
#215000
b11110 "
b11110 ;
b11110 D
b11110 /
b11110 ?
b11110 s
1(
#220000
0(
#225000
1(
#226000
b10 F
b10 _
b10 P
b10 k
b1110 &
b1110 -
b100 '
b100 .
b100 G
b100 Q
b100 `
b100 l
b10 t
b1110 x
b100 w
b11110 *
#230000
0(
#235000
b10 "
b10 ;
b10 D
b10 /
b10 ?
b10 s
1(
#240000
0(
#245000
1(
#246000
b11 F
b11 _
b11 P
b11 k
b1111 &
b1111 -
b1000 t
b1111 x
b10 *
#250000
0(
#255000
b1000 "
b1000 ;
b1000 D
b1000 /
b1000 ?
b1000 s
1(
#260000
0(
#265000
1(
#266000
b1000 *
