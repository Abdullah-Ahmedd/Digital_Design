# Complete Verilog Syntax Guide for Beginners

## 1. Module Declaration

### Basic Syntax
```verilog
module module_name (port_list);
    // module contents
endmodule
```

**Components:**
- `module` - **REQUIRED** keyword
- `module_name` - **REQUIRED** identifier (no spaces, starts with letter/underscore)
- `(port_list)` - **OPTIONAL** parentheses with ports
- `endmodule` - **REQUIRED** keyword

**When to use:** Every Verilog design starts with a module. Think of it as a black box with inputs and outputs.

**Example:**
```verilog
module counter (clk, reset, count);
    // module body
endmodule
```

## 2. Port Declarations

### ANSI Style (Modern, Recommended)
```verilog
module example (
    input wire clk,
    input wire [3:0] data_in,
    output reg [7:0] data_out
);
```

### Non-ANSI Style (Legacy)
```verilog
module example (clk, data_in, data_out);
    input clk;
    input [3:0] data_in;
    output [7:0] data_out;
```

**Port Types:**
- `input` - **REQUIRED** for inputs
- `output` - **REQUIRED** for outputs  
- `inout` - **REQUIRED** for bidirectional ports
- `wire` - **OPTIONAL** (default for inputs)
- `reg` - **OPTIONAL** (needed for outputs assigned in always blocks)

**When to use ANSI:** Always use ANSI style for new designs - it's cleaner and less error-prone.

## 3. Data Types

### Wire
```verilog
wire signal_name;           // 1-bit wire
wire [7:0] bus_name;        // 8-bit wire (bus)
wire [MSB:LSB] range_name;  // Custom range
```

**When to use:** For connections between modules, continuous assignments, and combinational logic outputs.

### Reg
```verilog
reg variable_name;          // 1-bit register
reg [15:0] counter;         // 16-bit register
reg signed [7:0] temp;      // Signed 8-bit register
```

**When to use:** For variables assigned inside always blocks, memory elements, and procedural assignments.

### Parameters
```verilog
parameter WIDTH = 8;                    // Local parameter
parameter [7:0] MAX_COUNT = 255;        // With range
localparam INTERNAL_CONST = 16;         // Local to module only
```

**Components:**
- `parameter` - **REQUIRED** keyword (can be overridden)
- `localparam` - **REQUIRED** keyword (cannot be overridden)
- Range specification - **OPTIONAL**

**When to use:** For constants, configurable widths, and magic numbers. Use `localparam` for internal constants.

## 4. Number Representation

### Sized Numbers
```verilog
4'b1010        // 4-bit binary
8'h5A          // 8-bit hexadecimal  
16'd1234       // 16-bit decimal
32'o777        // 32-bit octal
```

### Unsized Numbers
```verilog
1010           // Decimal (default)
'b1010         // Binary
'hAB           // Hexadecimal
'o777          // Octal
```

**Format:** `[size]'[base][value]`
- `size` - **OPTIONAL** (defaults to 32 bits)
- `'` - **REQUIRED** apostrophe
- `base` - **OPTIONAL** (b/B=binary, h/H=hex, d/D=decimal, o/O=octal)
- `value` - **REQUIRED**

**When to use:** Always specify size for synthesis to avoid unexpected bit widths.

## 5. Operators

### Arithmetic
```verilog
+, -, *, /, %                    // Basic arithmetic
**                               // Exponentiation (synthesis limited)
```

### Logical
```verilog
&&                               // Logical AND
||                               // Logical OR  
!                                // Logical NOT
```

### Bitwise
```verilog
&                                // Bitwise AND
|                                // Bitwise OR
^                                // Bitwise XOR
~                                // Bitwise NOT
^~  or  ~^                       // Bitwise XNOR
```

### Reduction
```verilog
&data                            // AND reduction
|data                            // OR reduction
^data                            // XOR reduction
```

### Relational
```verilog
<, <=, >, >=                     // Comparisons
==, !=                           // Equality
===, !==                         // Case equality (includes X and Z)
```

### Shift
```verilog
<<, >>                           // Logical shift
<<<, >>>                         // Arithmetic shift
```

**When to use:** Choose appropriate operator for your logic. Use `===` for testbenches, `==` for synthesis.

## 6. Continuous Assignment

### Assign Statement
```verilog
assign signal = expression;
assign {carry, sum} = a + b;           // Concatenation
assign bus[3:0] = data;                // Partial assignment
```

**Components:**
- `assign` - **REQUIRED** keyword
- `signal` - **REQUIRED** (must be wire type)
- `=` - **REQUIRED** assignment operator
- `expression` - **REQUIRED**

**When to use:** For combinational logic, simple connections, and datapath operations.

### Conditional Assignment
```verilog
assign output = select ? input1 : input2;           // Ternary operator
assign result = (a > b) ? a : b;                    // Maximum function
```

**When to use:** For multiplexers and simple conditional logic.

## 7. Always Blocks

### Combinational Logic
```verilog
always @(*) begin
    // combinational logic
end

always @(a or b or c) begin              // Explicit sensitivity list
    // combinational logic  
end

always_comb begin                        // SystemVerilog only
    // combinational logic
end
```

### Sequential Logic
```verilog
always @(posedge clk) begin
    // synchronous logic
end

always @(posedge clk or negedge reset) begin
    // synchronous with async reset
end

always @(negedge clk) begin
    // negative edge triggered
end
```

**Components:**
- `always` - **REQUIRED** keyword
- `@(sensitivity_list)` - **REQUIRED** event control
- `begin` - **REQUIRED** for multiple statements
- `end` - **REQUIRED** to close begin

**When to use:** 
- `@(*)` for combinational logic
- `@(posedge clk)` for flip-flops and counters
- `@(posedge clk or negedge reset)` for async reset

## 8. Procedural Statements

### Blocking Assignment
```verilog
variable = expression;                   // Executes immediately
a = b;
c = a;                                  // c gets value of b
```

### Non-blocking Assignment  
```verilog
variable <= expression;                  // Executes at end of time step
a <= b;
c <= a;                                 // c gets old value of a
```

**When to use:**
- Use `=` in combinational always blocks
- Use `<=` in sequential always blocks
- Never mix in same always block

### If-Else Statement
```verilog
if (condition) begin
    // statements
end else if (condition2) begin
    // statements  
end else begin
    // statements
end
```

**Components:**
- `if` - **REQUIRED** keyword
- `(condition)` - **REQUIRED** parentheses around condition
- `begin`/`end` - **OPTIONAL** for single statement, **REQUIRED** for multiple
- `else` - **OPTIONAL**

### Case Statement
```verilog
case (expression)
    value1: statement1;
    value2: begin
        // multiple statements
    end
    value3, value4: statement3;          // Multiple values
    default: default_statement;          // Optional but recommended
endcase
```

**Components:**
- `case` - **REQUIRED** keyword
- `(expression)` - **REQUIRED** parentheses
- `:` - **REQUIRED** after each case value
- `default` - **OPTIONAL** but recommended
- `endcase` - **REQUIRED**

**Variants:**
- `casez` - treats Z as don't care
- `casex` - treats X and Z as don't care

### For Loop
```verilog
integer i;                               // Loop variable declaration
for (i = 0; i < 8; i = i + 1) begin
    // statements
end
```

**When to use:** For generate blocks and testbenches. Limited synthesis support.

## 9. Module Instantiation

### Named Port Connection (Recommended)
```verilog
module_name instance_name (
    .port_name(signal_name),
    .clk(clock),
    .reset(rst)
);
```

### Positional Port Connection
```verilog
module_name instance_name (signal1, signal2, signal3);
```

**Components:**
- `module_name` - **REQUIRED** (must match module definition)
- `instance_name` - **REQUIRED** (unique identifier)
- Port connections - **REQUIRED** for all ports (or use defaults)

**When to use:** Always use named connections for clarity and maintainability.

## 10. Generate Blocks

### Generate For
```verilog
generate
    genvar i;
    for (i = 0; i < 8; i = i + 1) begin : gen_loop
        // replicated hardware
    end
endgenerate
```

### Generate If
```verilog
generate
    if (PARAMETER == 1) begin : gen_option1
        // conditional hardware
    end else begin : gen_option2
        // alternative hardware
    end
endgenerate
```

**Components:**
- `generate` - **REQUIRED** keyword
- `genvar` - **REQUIRED** for loop variables
- `begin : label` - **REQUIRED** labels for multiple statements
- `endgenerate` - **REQUIRED**

**When to use:** For creating arrays of instances and conditional compilation.

## 11. Functions and Tasks

### Function
```verilog
function [return_width] function_name (input declarations);
    // combinational logic only
    function_name = result;              // Assignment to function name
endfunction
```

### Task
```verilog
task task_name (input/output declarations);
    // can have delays and sequential logic
endtask
```

**When to use:** Functions for combinational calculations, tasks for complex procedures (mainly in testbenches).

## 12. Compiler Directives

### Include
```verilog
`include "filename.v"                    // Include another file
```

### Define
```verilog
`define CONSTANT_NAME value              // Define macro
`define MAX_WIDTH 32
```

### Ifdef
```verilog
`ifdef DEBUG
    // debug code
`endif
```

**Components:**
- `` ` `` - **REQUIRED** backtick before directive
- Directive name - **REQUIRED**

## 13. Comments

### Single Line
```verilog
// This is a single line comment
```

### Multi-line
```verilog
/* This is a
   multi-line comment */
```

**When to use:** Document complex logic, explain design decisions, and add headers.

## 14. Common Syntax Rules

### Identifiers
- Must start with letter or underscore
- Can contain letters, digits, underscores
- Case sensitive
- Cannot be keywords

### Statements
- End with semicolon (`;`) - **REQUIRED**
- Can span multiple lines
- Whitespace is ignored

### Blocking Structure
- `begin`/`end` - **REQUIRED** for multiple statements
- `begin : label` - **OPTIONAL** labels for debugging

## 15. Best Practices Summary

**Always Required:**
- Module declaration with `endmodule`
- Semicolons after statements
- Proper sensitivity lists in always blocks

**Recommended:**
- ANSI-style port declarations
- Named port connections
- Explicit bit widths
- Default cases in case statements
- Comments for complex logic

**Avoid:**
- Mixing blocking and non-blocking assignments
- Using `reg` for simple connections (use `wire`)
- Unsized numbers in synthesis code
- `casex` in synthesis (use `casez` carefully)

This covers all the fundamental Verilog syntax you need to start writing hardware descriptions. Focus on modules, always blocks, and basic assignments first, then gradually incorporate the advanced features as needed.
