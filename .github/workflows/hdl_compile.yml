name: Verilog/VHDL Compilation Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  compile-hdl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install HDL tools
      run: |
        sudo apt-get update
        sudo apt-get install -y iverilog ghdl

    - name: Find all HDL files
      run: |
        echo "Finding all .v and .vhdl files..."
        find . -name "*.v" -type f > verilog_files.txt
        find . -name "*.vhdl" -type f > vhdl_files.txt
        find . -name "*.vhd" -type f >> vhdl_files.txt
        
        echo "Found Verilog files:"
        cat verilog_files.txt || echo "No Verilog files found"
        echo "Found VHDL files:"
        cat vhdl_files.txt || echo "No VHDL files found"
        
        # Count files properly, handling empty files
        VERILOG_COUNT=$(wc -l < verilog_files.txt | tr -d ' ')
        VHDL_COUNT=$(wc -l < vhdl_files.txt | tr -d ' ')
        
        echo "VERILOG_COUNT=$VERILOG_COUNT" >> $GITHUB_ENV
        echo "VHDL_COUNT=$VHDL_COUNT" >> $GITHUB_ENV
        
        echo "Verilog files count: $VERILOG_COUNT"
        echo "VHDL files count: $VHDL_COUNT"

    - name: Compile Verilog files
      if: env.VERILOG_COUNT != '0'
      run: |
        echo "========================================="
        echo "           VERILOG COMPILATION"
        echo "========================================="
        
        # Initialize variables
        success_count=0
        error_count=0
        successful_files=""
        failed_files=""
        failed_details=""
        overall_success=true
        
        # Check if file exists and has content
        if [ ! -s "verilog_files.txt" ]; then
          echo "No Verilog files to compile"
          echo "VERILOG_FAILED=false" >> $GITHUB_ENV
          exit 0
        fi
        
        while IFS= read -r file; do
          # Skip empty lines
          if [ -z "$file" ]; then
            continue
          fi
          
          echo ""
          echo "üîß Compiling: $file"
          echo "----------------------------------------"
          
          # Check if file exists
          if [ ! -f "$file" ]; then
            echo "‚ùå FILE NOT FOUND: $file"
            failed_files="$failed_files$file\n"
            failed_details="$failed_details‚Ä¢ $file: File not found\n"
            ((error_count++))
            overall_success=false
            continue
          fi
          
          # Compile with iverilog
          if output=$(iverilog -t null "$file" 2>&1); then
            echo "‚úÖ SUCCESS: $file"
            successful_files="$successful_files$file\n"
            ((success_count++))
          else
            echo "‚ùå COMPILATION FAILED: $file"
            echo ""
            echo "üìç Error Details:"
            echo "$output" | sed 's/^/   /'
            echo ""
            echo "üí° Common Issues:"
            echo "   ‚Ä¢ Check syntax errors (missing semicolons, parentheses)"
            echo "   ‚Ä¢ Verify module declarations and port lists"
            echo "   ‚Ä¢ Ensure all referenced modules are available"
            echo "   ‚Ä¢ Check for undeclared variables or signals"
            echo "----------------------------------------"
            failed_files="$failed_files$file\n"
            # Store first line of error for summary
            error_line=$(echo "$output" | head -1 | tr -d '\n')
            failed_details="$failed_details‚Ä¢ $file: $error_line\n"
            ((error_count++))
            overall_success=false
          fi
        done < verilog_files.txt
        
        echo ""
        echo "========================================="
        echo "        VERILOG COMPILATION SUMMARY"
        echo "========================================="
        echo "‚úÖ Successfully compiled: $success_count files"
        echo "‚ùå Failed to compile: $error_count files"
        
        if [ -n "$successful_files" ]; then
          echo ""
          echo "‚úÖ Successfully compiled files:"
          echo -e "$successful_files" | sed 's/^/   /'
        fi
        
        if [ -n "$failed_files" ]; then
          echo ""
          echo "‚ùå Failed files with errors:"
          echo -e "$failed_details" | sed 's/^/   /'
        fi
        
        # Set environment variables
        if [ "$overall_success" = true ]; then
          echo "VERILOG_FAILED=false" >> $GITHUB_ENV
          echo "üéâ All Verilog files compiled successfully!"
        else
          echo "VERILOG_FAILED=true" >> $GITHUB_ENV
        fi
        
        # Store results for final summary
        echo "VERILOG_SUCCESS_FILES<<EOF" >> $GITHUB_ENV
        echo -e "$successful_files" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "VERILOG_FAILED_DETAILS<<EOF" >> $GITHUB_ENV
        echo -e "$failed_details" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Compile VHDL files
      if: env.VHDL_COUNT != '0'
      run: |
        echo "========================================="
        echo "            VHDL COMPILATION"
        echo "========================================="
        
        # Initialize variables
        success_count=0
        error_count=0
        successful_files=""
        failed_files=""
        failed_details=""
        overall_success=true
        
        # Check if file exists and has content
        if [ ! -s "vhdl_files.txt" ]; then
          echo "No VHDL files to compile"
          echo "VHDL_FAILED=false" >> $GITHUB_ENV
          exit 0
        fi
        
        while IFS= read -r file; do
          # Skip empty lines
          if [ -z "$file" ]; then
            continue
          fi
          
          echo ""
          echo "üîß Compiling: $file"
          echo "----------------------------------------"
          
          # Check if file exists
          if [ ! -f "$file" ]; then
            echo "‚ùå FILE NOT FOUND: $file"
            failed_files="$failed_files$file\n"
            failed_details="$failed_details‚Ä¢ $file: File not found\n"
            ((error_count++))
            overall_success=false
            continue
          fi
          
          # Compile with ghdl
          if output=$(ghdl -s "$file" 2>&1); then
            echo "‚úÖ SUCCESS: $file"
            successful_files="$successful_files$file\n"
            ((success_count++))
          else
            echo "‚ùå COMPILATION FAILED: $file"
            echo ""
            echo "üìç Error Details:"
            echo "$output" | sed 's/^/   /'
            echo ""
            echo "üí° Common Issues:"
            echo "   ‚Ä¢ Check entity/architecture declarations"
            echo "   ‚Ä¢ Verify port maps and signal assignments"
            echo "   ‚Ä¢ Ensure library and package declarations"
            echo "   ‚Ä¢ Check for syntax errors and missing keywords"
            echo "   ‚Ä¢ Verify data type compatibility"
            echo "----------------------------------------"
            failed_files="$failed_files$file\n"
            # Store first line of error for summary
            error_line=$(echo "$output" | head -1 | tr -d '\n')
            failed_details="$failed_details‚Ä¢ $file: $error_line\n"
            ((error_count++))
            overall_success=false
          fi
        done < vhdl_files.txt
        
        echo ""
        echo "========================================="
        echo "         VHDL COMPILATION SUMMARY"
        echo "========================================="
        echo "‚úÖ Successfully compiled: $success_count files"
        echo "‚ùå Failed to compile: $error_count files"
        
        if [ -n "$successful_files" ]; then
          echo ""
          echo "‚úÖ Successfully compiled files:"
          echo -e "$successful_files" | sed 's/^/   /'
        fi
        
        if [ -n "$failed_files" ]; then
          echo ""
          echo "‚ùå Failed files with errors:"
          echo -e "$failed_details" | sed 's/^/   /'
        fi
        
        # Set environment variables
        if [ "$overall_success" = true ]; then
          echo "VHDL_FAILED=false" >> $GITHUB_ENV
          echo "üéâ All VHDL files compiled successfully!"
        else
          echo "VHDL_FAILED=true" >> $GITHUB_ENV
        fi
        
        # Store results for final summary
        echo "VHDL_SUCCESS_FILES<<EOF" >> $GITHUB_ENV
        echo -e "$successful_files" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "VHDL_FAILED_DETAILS<<EOF" >> $GITHUB_ENV
        echo -e "$failed_details" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Generate final summary
      run: |
        echo ""
        echo "========================================="
        echo "          FINAL COMPILATION SUMMARY"
        echo "========================================="
        echo ""
        
        # Calculate totals
        total_verilog_files=${VERILOG_COUNT:-0}
        total_vhdl_files=${VHDL_COUNT:-0}
        total_files=$((total_verilog_files + total_vhdl_files))
        
        # Count successful files
        verilog_success_count=0
        vhdl_success_count=0
        
        if [ -n "$VERILOG_SUCCESS_FILES" ]; then
          verilog_success_count=$(echo -e "$VERILOG_SUCCESS_FILES" | grep -c "\.v$" || echo 0)
        fi
        
        if [ -n "$VHDL_SUCCESS_FILES" ]; then
          vhdl_success_count=$(echo -e "$VHDL_SUCCESS_FILES" | grep -c -E "\.(vhdl|vhd)$" || echo 0)
        fi
        
        total_success=$((verilog_success_count + vhdl_success_count))
        total_failed=$((total_files - total_success))
        
        echo "üìä OVERALL RESULTS:"
        echo "   ‚Ä¢ Total files processed: $total_files"
        echo "   ‚Ä¢ Verilog files: $total_verilog_files"
        echo "   ‚Ä¢ VHDL files: $total_vhdl_files"
        echo "   ‚Ä¢ Successfully compiled: $total_success"
        echo "   ‚Ä¢ Failed compilation: $total_failed"
        echo ""
        
        if [ $total_success -gt 0 ]; then
          echo "‚úÖ FILES COMPILED SUCCESSFULLY:"
          if [ -n "$VERILOG_SUCCESS_FILES" ]; then
            echo -e "$VERILOG_SUCCESS_FILES" | sed 's/^/   üìÑ /' | sed 's/$/  ‚úì/'
          fi
          if [ -n "$VHDL_SUCCESS_FILES" ]; then
            echo -e "$VHDL_SUCCESS_FILES" | sed 's/^/   üìÑ /' | sed 's/$/  ‚úì/'
          fi
          echo ""
        fi
        
        if [ "$VERILOG_FAILED" = "true" ] || [ "$VHDL_FAILED" = "true" ]; then
          echo "‚ùå FILES WITH COMPILATION ERRORS:"
          if [ -n "$VERILOG_FAILED_DETAILS" ]; then
            echo -e "$VERILOG_FAILED_DETAILS" | sed 's/^/   üî¥ /'
          fi
          if [ -n "$VHDL_FAILED_DETAILS" ]; then
            echo -e "$VHDL_FAILED_DETAILS" | sed 's/^/   üî¥ /'
          fi
          echo ""
        fi
        
        echo "========================================="

    - name: Generate compilation report
      run: |
        echo "## üìä HDL Compilation Report" > compilation_report.md
        echo "" >> compilation_report.md
        echo "### üìã Summary" >> compilation_report.md
        echo "- **Verilog files found:** ${VERILOG_COUNT:-0}" >> compilation_report.md
        echo "- **VHDL files found:** ${VHDL_COUNT:-0}" >> compilation_report.md
        echo "- **Total files:** $((${VERILOG_COUNT:-0} + ${VHDL_COUNT:-0}))" >> compilation_report.md
        echo "" >> compilation_report.md
        
        if [ "${VERILOG_FAILED:-false}" = "true" ] || [ "${VHDL_FAILED:-false}" = "true" ]; then
          echo "### ‚ùå Compilation Status: FAILED" >> compilation_report.md
          echo "" >> compilation_report.md
          echo "**Issues detected during compilation.**" >> compilation_report.md
          echo "" >> compilation_report.md
          
          if [ -n "$VERILOG_FAILED_DETAILS" ]; then
            echo "#### Verilog Errors:" >> compilation_report.md
            echo -e "$VERILOG_FAILED_DETAILS" | sed 's/^/- /' >> compilation_report.md
            echo "" >> compilation_report.md
          fi
          
          if [ -n "$VHDL_FAILED_DETAILS" ]; then
            echo "#### VHDL Errors:" >> compilation_report.md
            echo -e "$VHDL_FAILED_DETAILS" | sed 's/^/- /' >> compilation_report.md
            echo "" >> compilation_report.md
          fi
          
          echo "#### üîç Troubleshooting Steps:" >> compilation_report.md
          echo "1. Review the detailed error messages above" >> compilation_report.md
          echo "2. Check syntax and module/entity declarations" >> compilation_report.md
          echo "3. Verify all dependencies are present" >> compilation_report.md
          echo "4. Ensure proper library inclusions" >> compilation_report.md
          echo "" >> compilation_report.md
          echo "#### üìù Next Actions:" >> compilation_report.md
          echo "- Fix the compilation errors listed in the CI logs" >> compilation_report.md
          echo "- Test locally with the same compiler versions" >> compilation_report.md
          echo "- Consider adding testbenches for verification" >> compilation_report.md
        else
          echo "### ‚úÖ Compilation Status: SUCCESS" >> compilation_report.md
          echo "" >> compilation_report.md
          echo "**All HDL files compiled successfully!** üéâ" >> compilation_report.md
          echo "" >> compilation_report.md
          echo "Your code passes basic syntax and compilation checks." >> compilation_report.md
          echo "" >> compilation_report.md
          echo "#### üöÄ Recommended Next Steps:" >> compilation_report.md
          echo "- Consider adding simulation testbenches" >> compilation_report.md
          echo "- Run synthesis for target FPGA/ASIC" >> compilation_report.md
          echo "- Perform timing analysis if applicable" >> compilation_report.md
        fi
        
        cat compilation_report.md

    - name: Upload compilation report
      uses: actions/upload-artifact@v4
      with:
        name: compilation-report
        path: compilation_report.md

    - name: Final status check
      run: |
        # Initialize default values if not set
        VERILOG_FAILED=${VERILOG_FAILED:-false}
        VHDL_FAILED=${VHDL_FAILED:-false}
        
        if [ "$VERILOG_FAILED" = "true" ] || [ "$VHDL_FAILED" = "true" ]; then
          echo ""
          echo "========================================="
          echo "           COMPILATION FAILED"
          echo "========================================="
          echo ""
          echo "‚ùå Build failed due to compilation errors."
          echo ""
          echo "üîç Review the detailed error messages above to identify:"
          echo "   ‚Ä¢ Syntax errors and their exact locations"
          echo "   ‚Ä¢ Missing declarations or undefined signals"
          echo "   ‚Ä¢ Type mismatches or compatibility issues"
          echo "   ‚Ä¢ Structural problems in your HDL code"
          echo ""
          echo "üìù To fix these issues:"
          echo "   1. Check the specific error messages for each file"
          echo "   2. Verify your code follows proper HDL syntax"
          echo "   3. Ensure all modules/entities are properly declared"
          echo "   4. Test compilation locally before pushing"
          echo ""
          echo "========================================="
          exit 1
        else
          echo ""
          echo "========================================="
          echo "           COMPILATION SUCCESS"
          echo "========================================="
          echo ""
          echo "üéâ All HDL files compiled successfully!"
          echo ""
          echo "‚úÖ Your code passes basic syntax and compilation checks."
          echo ""
          echo "üöÄ Consider next steps:"
          echo "   ‚Ä¢ Add simulation testbenches"
          echo "   ‚Ä¢ Run synthesis for target platform"
          echo "   ‚Ä¢ Perform timing analysis"
          echo ""
          echo "========================================="
        fi
