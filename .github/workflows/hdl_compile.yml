name: HDL Compilation Check

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  compile-hdl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install HDL tools
      run: |
        sudo apt-get update
        sudo apt-get install -y iverilog ghdl

    - name: Find all HDL files
      run: |
        echo "üîç Searching for HDL files..."
        
        # Find all HDL files with proper handling of empty results
        find . -name "*.v" -type f 2>/dev/null | sort > verilog_files.txt
        find . -name "*.sv" -type f 2>/dev/null | sort >> verilog_files.txt  # SystemVerilog
        find . -name "*.vh" -type f 2>/dev/null | sort >> verilog_files.txt  # Verilog headers
        find . -name "*.vhdl" -type f 2>/dev/null | sort > vhdl_files.txt
        find . -name "*.vhd" -type f 2>/dev/null | sort >> vhdl_files.txt
        
        # Remove duplicates and empty lines
        sort -u verilog_files.txt | grep -v '^$' > verilog_files_clean.txt || touch verilog_files_clean.txt
        sort -u vhdl_files.txt | grep -v '^$' > vhdl_files_clean.txt || touch vhdl_files_clean.txt
        
        # Move clean files back
        mv verilog_files_clean.txt verilog_files.txt
        mv vhdl_files_clean.txt vhdl_files.txt
        
        echo "üìÅ Found Verilog/SystemVerilog files:"
        if [ -s verilog_files.txt ]; then
          cat verilog_files.txt | while read file; do echo "  - $file"; done
        else
          echo "  - No Verilog files found"
        fi
        
        echo "üìÅ Found VHDL files:"
        if [ -s vhdl_files.txt ]; then
          cat vhdl_files.txt | while read file; do echo "  - $file"; done
        else
          echo "  - No VHDL files found"
        fi
        
        # Count files properly
        VERILOG_COUNT=$(wc -l < verilog_files.txt)
        VHDL_COUNT=$(wc -l < vhdl_files.txt)
        
        echo "VERILOG_COUNT=$VERILOG_COUNT" >> $GITHUB_ENV
        echo "VHDL_COUNT=$VHDL_COUNT" >> $GITHUB_ENV
        
        echo "üìä Summary: $VERILOG_COUNT Verilog files, $VHDL_COUNT VHDL files"

    - name: Initialize status variables
      run: |
        echo "COMPILATION_FAILED=false" >> $GITHUB_ENV
        echo "TOTAL_ERRORS=0" >> $GITHUB_ENV
        echo "TOTAL_SUCCESS=0" >> $GITHUB_ENV

    - name: Compile Verilog files
      if: env.VERILOG_COUNT != '0'
      run: |
        echo ""
        echo "üîß ============================================="
        echo "üîß           VERILOG COMPILATION"
        echo "üîß ============================================="
        
        success_count=0
        error_count=0
        detailed_errors=""
        
        # Create compilation log
        echo "# Verilog Compilation Results" > verilog_results.md
        echo "" >> verilog_results.md
        
        # Process each Verilog file
        while IFS= read -r file; do
          if [ -n "$file" ]; then
            echo ""
            echo "üîß Compiling: $file"
            echo "----------------------------------------"
            
            if [ ! -f "$file" ]; then
              echo "‚ùå FILE NOT FOUND: $file"
              echo "## ‚ùå $file" >> verilog_results.md
              echo "**Error:** File not found" >> verilog_results.md
              echo "" >> verilog_results.md
              detailed_errors="${detailed_errors}‚ùå $file: File not found\n"
              ((error_count++))
            else
              # Compile with detailed error output
              if error_output=$(iverilog -t null "$file" 2>&1); then
                echo "‚úÖ SUCCESS: $file"
                echo "## ‚úÖ $file" >> verilog_results.md
                echo "**Status:** Compilation successful" >> verilog_results.md
                echo "" >> verilog_results.md
                ((success_count++))
              else
                echo "‚ùå COMPILATION FAILED: $file"
                echo "Error details:"
                echo "$error_output"
                echo ""
                
                echo "## ‚ùå $file" >> verilog_results.md
                echo "**Status:** Compilation failed" >> verilog_results.md
                echo "**Error details:**" >> verilog_results.md
                echo '```' >> verilog_results.md
                echo "$error_output" >> verilog_results.md
                echo '```' >> verilog_results.md
                echo "" >> verilog_results.md
                
                detailed_errors="${detailed_errors}‚ùå $file: $error_output\n"
                ((error_count++))
              fi
            fi
          fi
        done < verilog_files.txt
        
        echo ""
        echo "üîß ========================================="
        echo "üîß       VERILOG COMPILATION SUMMARY"
        echo "üîß ========================================="
        echo "‚úÖ Successfully compiled: $success_count files"
        echo "‚ùå Failed to compile: $error_count files"
        
        # Update environment variables
        if [ $error_count -gt 0 ]; then
          echo "COMPILATION_FAILED=true" >> $GITHUB_ENV
        fi
        
        # Store results for final summary
        echo "VERILOG_SUCCESS=$success_count" >> $GITHUB_ENV
        echo "VERILOG_ERRORS=$error_count" >> $GITHUB_ENV
        
        # Update totals
        current_success=$((${TOTAL_SUCCESS:-0} + success_count))
        current_errors=$((${TOTAL_ERRORS:-0} + error_count))
        echo "TOTAL_SUCCESS=$current_success" >> $GITHUB_ENV
        echo "TOTAL_ERRORS=$current_errors" >> $GITHUB_ENV

    - name: Compile VHDL files
      if: env.VHDL_COUNT != '0'
      run: |
        echo ""
        echo "üîß ============================================="
        echo "üîß            VHDL COMPILATION"
        echo "üîß ============================================="
        
        success_count=0
        error_count=0
        detailed_errors=""
        
        # Create compilation log
        echo "# VHDL Compilation Results" > vhdl_results.md
        echo "" >> vhdl_results.md
        
        # Process each VHDL file
        while IFS= read -r file; do
          if [ -n "$file" ]; then
            echo ""
            echo "üîß Compiling: $file"
            echo "----------------------------------------"
            
            if [ ! -f "$file" ]; then
              echo "‚ùå FILE NOT FOUND: $file"
              echo "## ‚ùå $file" >> vhdl_results.md
              echo "**Error:** File not found" >> vhdl_results.md
              echo "" >> vhdl_results.md
              detailed_errors="${detailed_errors}‚ùå $file: File not found\n"
              ((error_count++))
            else
              # Compile with detailed error output
              if error_output=$(ghdl -s "$file" 2>&1); then
                echo "‚úÖ SUCCESS: $file"
                echo "## ‚úÖ $file" >> vhdl_results.md
                echo "**Status:** Compilation successful" >> vhdl_results.md
                echo "" >> vhdl_results.md
                ((success_count++))
              else
                echo "‚ùå COMPILATION FAILED: $file"
                echo "Error details:"
                echo "$error_output"
                echo ""
                
                echo "## ‚ùå $file" >> vhdl_results.md
                echo "**Status:** Compilation failed" >> vhdl_results.md
                echo "**Error details:**" >> vhdl_results.md
                echo '```' >> vhdl_results.md
                echo "$error_output" >> vhdl_results.md
                echo '```' >> vhdl_results.md
                echo "" >> vhdl_results.md
                
                detailed_errors="${detailed_errors}‚ùå $file: $error_output\n"
                ((error_count++))
              fi
            fi
          fi
        done < vhdl_files.txt
        
        echo ""
        echo "üîß ========================================="
        echo "üîß        VHDL COMPILATION SUMMARY"
        echo "üîß ========================================="
        echo "‚úÖ Successfully compiled: $success_count files"
        echo "‚ùå Failed to compile: $error_count files"
        
        # Update environment variables
        if [ $error_count -gt 0 ]; then
          echo "COMPILATION_FAILED=true" >> $GITHUB_ENV
        fi
        
        # Store results for final summary
        echo "VHDL_SUCCESS=$success_count" >> $GITHUB_ENV
        echo "VHDL_ERRORS=$error_count" >> $GITHUB_ENV
        
        # Update totals
        current_success=$((${TOTAL_SUCCESS:-0} + success_count))
        current_errors=$((${TOTAL_ERRORS:-0} + error_count))
        echo "TOTAL_SUCCESS=$current_success" >> $GITHUB_ENV
        echo "TOTAL_ERRORS=$current_errors" >> $GITHUB_ENV

    - name: Generate comprehensive report
      run: |
        echo ""
        echo "üìä ============================================="
        echo "üìä          FINAL COMPILATION REPORT"
        echo "üìä ============================================="
        echo ""
        
        total_files=$((${VERILOG_COUNT:-0} + ${VHDL_COUNT:-0}))
        
        # Create markdown report
        cat << EOF > compilation_report.md
        # üîß HDL Compilation Report
        
        ## üìä Summary
        
        | Metric | Count |
        |--------|-------|
        | **Total HDL Files** | $total_files |
        | **Verilog Files** | ${VERILOG_COUNT:-0} |
        | **VHDL Files** | ${VHDL_COUNT:-0} |
        | **‚úÖ Successful Compilations** | ${TOTAL_SUCCESS:-0} |
        | **‚ùå Failed Compilations** | ${TOTAL_ERRORS:-0} |
        
        EOF
        
        if [ "${COMPILATION_FAILED:-false}" = "true" ]; then
          cat << EOF >> compilation_report.md
        ## ‚ùå Compilation Status: FAILED
        
        **Issues detected during compilation!**
        
        ### üîç Files with Issues:
        
        EOF
          
          # Add detailed error information
          if [ -f verilog_results.md ]; then
            echo "### Verilog Files:" >> compilation_report.md
            cat verilog_results.md >> compilation_report.md
            echo "" >> compilation_report.md
          fi
          
          if [ -f vhdl_results.md ]; then
            echo "### VHDL Files:" >> compilation_report.md
            cat vhdl_results.md >> compilation_report.md
            echo "" >> compilation_report.md
          fi
          
          cat << EOF >> compilation_report.md
        ### üõ†Ô∏è How to Fix:
        
        1. **Review Error Messages**: Check the detailed error messages above
        2. **Syntax Check**: Verify proper HDL syntax in failing files
        3. **Dependencies**: Ensure all required modules/entities are available
        4. **Library Includes**: Check that all necessary libraries are included
        5. **File Paths**: Verify all file paths and names are correct
        
        ### üß™ Testing Locally:
        
        **For Verilog:**
        \`\`\`bash
        iverilog -t null your_file.v
        \`\`\`
        
        **For VHDL:**
        \`\`\`bash
        ghdl -s your_file.vhdl
        \`\`\`
        
        EOF
        else
          cat << EOF >> compilation_report.md
        ## ‚úÖ Compilation Status: SUCCESS
        
        **üéâ All HDL files compiled successfully!**
        
        Your code passes basic syntax and compilation checks.
        
        ### üöÄ Next Steps:
        
        - ‚úÖ **Syntax Check**: Complete
        - üß™ **Add Testbenches**: Consider adding simulation testbenches
        - üîÑ **Run Synthesis**: Test with your target FPGA/ASIC tools
        - ‚è±Ô∏è **Timing Analysis**: Perform timing analysis if applicable
        - üìã **Code Review**: Review for best practices and optimization
        
        ### üèÜ Great job! Your HDL code is syntactically correct.
        
        EOF
        fi
        
        # Display the report
        cat compilation_report.md
        
        # Console summary
        echo ""
        echo "üìä FINAL SUMMARY:"
        echo "   ‚Ä¢ Total files found: $total_files"
        echo "   ‚Ä¢ Verilog files: ${VERILOG_COUNT:-0}"
        echo "   ‚Ä¢ VHDL files: ${VHDL_COUNT:-0}"
        echo "   ‚Ä¢ ‚úÖ Successful compilations: ${TOTAL_SUCCESS:-0}"
        echo "   ‚Ä¢ ‚ùå Failed compilations: ${TOTAL_ERRORS:-0}"
        echo ""

    - name: Upload detailed reports
      uses: actions/upload-artifact@v4
      with:
        name: hdl-compilation-reports
        path: |
          compilation_report.md
          verilog_results.md
          vhdl_results.md
          verilog_files.txt
          vhdl_files.txt

    - name: Add PR comment with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = fs.readFileSync('compilation_report.md', 'utf8');
            const totalFiles = ${{ env.VERILOG_COUNT }} + ${{ env.VHDL_COUNT }};
            const failed = ${{ env.TOTAL_ERRORS }};
            
            const emoji = failed > 0 ? '‚ùå' : '‚úÖ';
            const status = failed > 0 ? 'FAILED' : 'PASSED';
            
            const comment = `## ${emoji} HDL Compilation Check ${status}
            
            **üìä Quick Summary:**
            - Total files: ${totalFiles}
            - Failed: ${failed}
            - Successful: ${{ env.TOTAL_SUCCESS }}
            
            <details>
            <summary>üìã Full Report</summary>
            
            ${report}
            
            </details>
            
            ${failed > 0 ? '‚ö†Ô∏è Please fix the compilation errors before merging.' : 'üéâ All HDL files compiled successfully!'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not post comment:', error);
          }

    - name: Final status check
      run: |
        echo ""
        echo "üèÅ ============================================="
        echo "üèÅ              FINAL STATUS"
        echo "üèÅ ============================================="
        echo ""
        
        if [ "${COMPILATION_FAILED:-false}" = "true" ]; then
          echo "‚ùå COMPILATION FAILED"
          echo ""
          echo "üìã Summary:"
          echo "   ‚Ä¢ Total files: $((${VERILOG_COUNT:-0} + ${VHDL_COUNT:-0}))"
          echo "   ‚Ä¢ Failed: ${TOTAL_ERRORS:-0}"
          echo "   ‚Ä¢ Successful: ${TOTAL_SUCCESS:-0}"
          echo ""
          echo "üîß Action Required:"
          echo "   ‚Ä¢ Check the detailed error messages above"
          echo "   ‚Ä¢ Fix compilation errors in the failing files"
          echo "   ‚Ä¢ Download the 'hdl-compilation-reports' artifact for detailed analysis"
          echo ""
          echo "üèÅ ============================================="
          exit 1
        else
          echo "‚úÖ COMPILATION SUCCESSFUL"
          echo ""
          echo "üéâ All HDL files compiled successfully!"
          echo ""
          echo "üìã Summary:"
          echo "   ‚Ä¢ Total files: $((${VERILOG_COUNT:-0} + ${VHDL_COUNT:-0}))"
          echo "   ‚Ä¢ All ${TOTAL_SUCCESS:-0} files compiled without errors"
          echo ""
          echo "üöÄ Your HDL code is syntactically correct!"
          echo "üèÅ ============================================="
        fi
